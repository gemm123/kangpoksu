// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/kopoksu/internal/repository/product.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/kopoksu/internal/repository/product.go -destination=D:/golang/src/kopoksu/mock/repository/product_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "kopoksu/internal/model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockProductRepository) DeleteProduct(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteProduct), product)
}

// GetAllProductsAdultDiaper mocks base method.
func (m *MockProductRepository) GetAllProductsAdultDiaper() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsAdultDiaper")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsAdultDiaper indicates an expected call of GetAllProductsAdultDiaper.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsAdultDiaper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsAdultDiaper", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsAdultDiaper))
}

// GetAllProductsAdultDiaperLimit mocks base method.
func (m *MockProductRepository) GetAllProductsAdultDiaperLimit(limit int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsAdultDiaperLimit", limit)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsAdultDiaperLimit indicates an expected call of GetAllProductsAdultDiaperLimit.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsAdultDiaperLimit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsAdultDiaperLimit", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsAdultDiaperLimit), limit)
}

// GetAllProductsBabyDiaper mocks base method.
func (m *MockProductRepository) GetAllProductsBabyDiaper() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsBabyDiaper")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsBabyDiaper indicates an expected call of GetAllProductsBabyDiaper.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsBabyDiaper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsBabyDiaper", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsBabyDiaper))
}

// GetAllProductsBabyDiaperLimit mocks base method.
func (m *MockProductRepository) GetAllProductsBabyDiaperLimit(limit int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsBabyDiaperLimit", limit)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsBabyDiaperLimit indicates an expected call of GetAllProductsBabyDiaperLimit.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsBabyDiaperLimit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsBabyDiaperLimit", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsBabyDiaperLimit), limit)
}

// GetAllProductsFormulaMilk mocks base method.
func (m *MockProductRepository) GetAllProductsFormulaMilk() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsFormulaMilk")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsFormulaMilk indicates an expected call of GetAllProductsFormulaMilk.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsFormulaMilk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsFormulaMilk", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsFormulaMilk))
}

// GetAllProductsFormulaMilkLimit mocks base method.
func (m *MockProductRepository) GetAllProductsFormulaMilkLimit(limit int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsFormulaMilkLimit", limit)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsFormulaMilkLimit indicates an expected call of GetAllProductsFormulaMilkLimit.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsFormulaMilkLimit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsFormulaMilkLimit", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsFormulaMilkLimit), limit)
}

// GetProductById mocks base method.
func (m *MockProductRepository) GetProductById(id uuid.UUID) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductRepositoryMockRecorder) GetProductById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductRepository)(nil).GetProductById), id)
}

// ReportSalesAdultDiaperOfflineOrderByDate mocks base method.
func (m *MockProductRepository) ReportSalesAdultDiaperOfflineOrderByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesAdultDiaperOfflineOrderByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesAdultDiaperOfflineOrderByDate indicates an expected call of ReportSalesAdultDiaperOfflineOrderByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesAdultDiaperOfflineOrderByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesAdultDiaperOfflineOrderByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesAdultDiaperOfflineOrderByDate), date)
}

// ReportSalesAdultDiaperOfflineOrderByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesAdultDiaperOfflineOrderByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesAdultDiaperOfflineOrderByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesAdultDiaperOfflineOrderByMonthYear indicates an expected call of ReportSalesAdultDiaperOfflineOrderByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesAdultDiaperOfflineOrderByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesAdultDiaperOfflineOrderByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesAdultDiaperOfflineOrderByMonthYear), month, year)
}

// ReportSalesAdultDiaperOnlineOrderByDate mocks base method.
func (m *MockProductRepository) ReportSalesAdultDiaperOnlineOrderByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesAdultDiaperOnlineOrderByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesAdultDiaperOnlineOrderByDate indicates an expected call of ReportSalesAdultDiaperOnlineOrderByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesAdultDiaperOnlineOrderByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesAdultDiaperOnlineOrderByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesAdultDiaperOnlineOrderByDate), date)
}

// ReportSalesAdultDiaperOnlineOrderByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesAdultDiaperOnlineOrderByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesAdultDiaperOnlineOrderByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesAdultDiaperOnlineOrderByMonthYear indicates an expected call of ReportSalesAdultDiaperOnlineOrderByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesAdultDiaperOnlineOrderByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesAdultDiaperOnlineOrderByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesAdultDiaperOnlineOrderByMonthYear), month, year)
}

// ReportSalesBabyDiaperOfflineOrderByDate mocks base method.
func (m *MockProductRepository) ReportSalesBabyDiaperOfflineOrderByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesBabyDiaperOfflineOrderByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesBabyDiaperOfflineOrderByDate indicates an expected call of ReportSalesBabyDiaperOfflineOrderByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesBabyDiaperOfflineOrderByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesBabyDiaperOfflineOrderByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesBabyDiaperOfflineOrderByDate), date)
}

// ReportSalesBabyDiaperOfflineOrderByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesBabyDiaperOfflineOrderByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesBabyDiaperOfflineOrderByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesBabyDiaperOfflineOrderByMonthYear indicates an expected call of ReportSalesBabyDiaperOfflineOrderByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesBabyDiaperOfflineOrderByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesBabyDiaperOfflineOrderByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesBabyDiaperOfflineOrderByMonthYear), month, year)
}

// ReportSalesBabyDiaperOnlineOrderByDate mocks base method.
func (m *MockProductRepository) ReportSalesBabyDiaperOnlineOrderByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesBabyDiaperOnlineOrderByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesBabyDiaperOnlineOrderByDate indicates an expected call of ReportSalesBabyDiaperOnlineOrderByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesBabyDiaperOnlineOrderByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesBabyDiaperOnlineOrderByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesBabyDiaperOnlineOrderByDate), date)
}

// ReportSalesBabyDiaperOnlineOrderByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesBabyDiaperOnlineOrderByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesBabyDiaperOnlineOrderByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesBabyDiaperOnlineOrderByMonthYear indicates an expected call of ReportSalesBabyDiaperOnlineOrderByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesBabyDiaperOnlineOrderByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesBabyDiaperOnlineOrderByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesBabyDiaperOnlineOrderByMonthYear), month, year)
}

// ReportSalesFormulaMilkOfflineOrderByDate mocks base method.
func (m *MockProductRepository) ReportSalesFormulaMilkOfflineOrderByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesFormulaMilkOfflineOrderByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesFormulaMilkOfflineOrderByDate indicates an expected call of ReportSalesFormulaMilkOfflineOrderByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesFormulaMilkOfflineOrderByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesFormulaMilkOfflineOrderByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesFormulaMilkOfflineOrderByDate), date)
}

// ReportSalesFormulaMilkOfflineOrderByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesFormulaMilkOfflineOrderByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesFormulaMilkOfflineOrderByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesFormulaMilkOfflineOrderByMonthYear indicates an expected call of ReportSalesFormulaMilkOfflineOrderByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesFormulaMilkOfflineOrderByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesFormulaMilkOfflineOrderByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesFormulaMilkOfflineOrderByMonthYear), month, year)
}

// ReportSalesFormulaMilkOnlineOrderByDate mocks base method.
func (m *MockProductRepository) ReportSalesFormulaMilkOnlineOrderByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesFormulaMilkOnlineOrderByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesFormulaMilkOnlineOrderByDate indicates an expected call of ReportSalesFormulaMilkOnlineOrderByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesFormulaMilkOnlineOrderByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesFormulaMilkOnlineOrderByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesFormulaMilkOnlineOrderByDate), date)
}

// ReportSalesFormulaMilkOnlineOrderByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesFormulaMilkOnlineOrderByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesFormulaMilkOnlineOrderByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesFormulaMilkOnlineOrderByMonthYear indicates an expected call of ReportSalesFormulaMilkOnlineOrderByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesFormulaMilkOnlineOrderByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesFormulaMilkOnlineOrderByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesFormulaMilkOnlineOrderByMonthYear), month, year)
}

// SaveProduct mocks base method.
func (m *MockProductRepository) SaveProduct(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockProductRepositoryMockRecorder) SaveProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockProductRepository)(nil).SaveProduct), product)
}

// SearchProductsByName mocks base method.
func (m *MockProductRepository) SearchProductsByName(name string) ([]model.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsByName", name)
	ret0, _ := ret[0].([]model.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsByName indicates an expected call of SearchProductsByName.
func (mr *MockProductRepositoryMockRecorder) SearchProductsByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsByName", reflect.TypeOf((*MockProductRepository)(nil).SearchProductsByName), name)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), product)
}
