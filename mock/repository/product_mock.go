// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/kopoksu/internal/repository/product.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/kopoksu/internal/repository/product.go -destination=D:/golang/src/kopoksu/mock/repository/product_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "kopoksu/internal/model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockProductRepository) DeleteProduct(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteProduct), product)
}

// GetAllProductsAdultDiaper mocks base method.
func (m *MockProductRepository) GetAllProductsAdultDiaper() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsAdultDiaper")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsAdultDiaper indicates an expected call of GetAllProductsAdultDiaper.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsAdultDiaper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsAdultDiaper", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsAdultDiaper))
}

// GetAllProductsAdultDiaperLimit mocks base method.
func (m *MockProductRepository) GetAllProductsAdultDiaperLimit(limit int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsAdultDiaperLimit", limit)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsAdultDiaperLimit indicates an expected call of GetAllProductsAdultDiaperLimit.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsAdultDiaperLimit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsAdultDiaperLimit", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsAdultDiaperLimit), limit)
}

// GetAllProductsBabyDiaper mocks base method.
func (m *MockProductRepository) GetAllProductsBabyDiaper() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsBabyDiaper")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsBabyDiaper indicates an expected call of GetAllProductsBabyDiaper.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsBabyDiaper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsBabyDiaper", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsBabyDiaper))
}

// GetAllProductsBabyDiaperLimit mocks base method.
func (m *MockProductRepository) GetAllProductsBabyDiaperLimit(limit int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsBabyDiaperLimit", limit)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsBabyDiaperLimit indicates an expected call of GetAllProductsBabyDiaperLimit.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsBabyDiaperLimit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsBabyDiaperLimit", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsBabyDiaperLimit), limit)
}

// GetAllProductsFormulaMilk mocks base method.
func (m *MockProductRepository) GetAllProductsFormulaMilk() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsFormulaMilk")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsFormulaMilk indicates an expected call of GetAllProductsFormulaMilk.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsFormulaMilk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsFormulaMilk", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsFormulaMilk))
}

// GetAllProductsFormulaMilkLimit mocks base method.
func (m *MockProductRepository) GetAllProductsFormulaMilkLimit(limit int) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsFormulaMilkLimit", limit)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsFormulaMilkLimit indicates an expected call of GetAllProductsFormulaMilkLimit.
func (mr *MockProductRepositoryMockRecorder) GetAllProductsFormulaMilkLimit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsFormulaMilkLimit", reflect.TypeOf((*MockProductRepository)(nil).GetAllProductsFormulaMilkLimit), limit)
}

// GetProductById mocks base method.
func (m *MockProductRepository) GetProductById(id uuid.UUID) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductRepositoryMockRecorder) GetProductById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductRepository)(nil).GetProductById), id)
}

// ReportSalesAdultDiaperByDate mocks base method.
func (m *MockProductRepository) ReportSalesAdultDiaperByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesAdultDiaperByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesAdultDiaperByDate indicates an expected call of ReportSalesAdultDiaperByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesAdultDiaperByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesAdultDiaperByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesAdultDiaperByDate), date)
}

// ReportSalesAdultDiaperByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesAdultDiaperByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesAdultDiaperByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesAdultDiaperByMonthYear indicates an expected call of ReportSalesAdultDiaperByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesAdultDiaperByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesAdultDiaperByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesAdultDiaperByMonthYear), month, year)
}

// ReportSalesBabyDiaperByDate mocks base method.
func (m *MockProductRepository) ReportSalesBabyDiaperByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesBabyDiaperByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesBabyDiaperByDate indicates an expected call of ReportSalesBabyDiaperByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesBabyDiaperByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesBabyDiaperByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesBabyDiaperByDate), date)
}

// ReportSalesBabyDiaperByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesBabyDiaperByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesBabyDiaperByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesBabyDiaperByMonthYear indicates an expected call of ReportSalesBabyDiaperByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesBabyDiaperByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesBabyDiaperByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesBabyDiaperByMonthYear), month, year)
}

// ReportSalesFormulaMilkByDate mocks base method.
func (m *MockProductRepository) ReportSalesFormulaMilkByDate(date string) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesFormulaMilkByDate", date)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesFormulaMilkByDate indicates an expected call of ReportSalesFormulaMilkByDate.
func (mr *MockProductRepositoryMockRecorder) ReportSalesFormulaMilkByDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesFormulaMilkByDate", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesFormulaMilkByDate), date)
}

// ReportSalesFormulaMilkByMonthYear mocks base method.
func (m *MockProductRepository) ReportSalesFormulaMilkByMonthYear(month, year int) ([]model.ProductSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSalesFormulaMilkByMonthYear", month, year)
	ret0, _ := ret[0].([]model.ProductSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSalesFormulaMilkByMonthYear indicates an expected call of ReportSalesFormulaMilkByMonthYear.
func (mr *MockProductRepositoryMockRecorder) ReportSalesFormulaMilkByMonthYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSalesFormulaMilkByMonthYear", reflect.TypeOf((*MockProductRepository)(nil).ReportSalesFormulaMilkByMonthYear), month, year)
}

// SaveProduct mocks base method.
func (m *MockProductRepository) SaveProduct(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockProductRepositoryMockRecorder) SaveProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockProductRepository)(nil).SaveProduct), product)
}

// SearchProductsByName mocks base method.
func (m *MockProductRepository) SearchProductsByName(name string) ([]model.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsByName", name)
	ret0, _ := ret[0].([]model.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsByName indicates an expected call of SearchProductsByName.
func (mr *MockProductRepositoryMockRecorder) SearchProductsByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsByName", reflect.TypeOf((*MockProductRepository)(nil).SearchProductsByName), name)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), product)
}
