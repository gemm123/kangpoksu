// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/kopoksu/internal/repository/online-order.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/kopoksu/internal/repository/online-order.go -destination=D:/golang/src/kopoksu/mock/repository/online-order_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "kopoksu/internal/model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOnlineOrderRepository is a mock of OnlineOrderRepository interface.
type MockOnlineOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOnlineOrderRepositoryMockRecorder
}

// MockOnlineOrderRepositoryMockRecorder is the mock recorder for MockOnlineOrderRepository.
type MockOnlineOrderRepositoryMockRecorder struct {
	mock *MockOnlineOrderRepository
}

// NewMockOnlineOrderRepository creates a new mock instance.
func NewMockOnlineOrderRepository(ctrl *gomock.Controller) *MockOnlineOrderRepository {
	mock := &MockOnlineOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOnlineOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnlineOrderRepository) EXPECT() *MockOnlineOrderRepositoryMockRecorder {
	return m.recorder
}

// CountOnlineOrderByStatus mocks base method.
func (m *MockOnlineOrderRepository) CountOnlineOrderByStatus(status string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOnlineOrderByStatus", status)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOnlineOrderByStatus indicates an expected call of CountOnlineOrderByStatus.
func (mr *MockOnlineOrderRepositoryMockRecorder) CountOnlineOrderByStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOnlineOrderByStatus", reflect.TypeOf((*MockOnlineOrderRepository)(nil).CountOnlineOrderByStatus), status)
}

// DeleteDetailOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) DeleteDetailOnlineOrder(detailOnlineOrder model.DetailOnlineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetailOnlineOrder", detailOnlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDetailOnlineOrder indicates an expected call of DeleteDetailOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) DeleteDetailOnlineOrder(detailOnlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetailOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).DeleteDetailOnlineOrder), detailOnlineOrder)
}

// DeleteOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) DeleteOnlineOrder(onlineOrder model.OnlineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOnlineOrder", onlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOnlineOrder indicates an expected call of DeleteOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) DeleteOnlineOrder(onlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).DeleteOnlineOrder), onlineOrder)
}

// GetAllDetailOnlineOrderByOnlineOrderId mocks base method.
func (m *MockOnlineOrderRepository) GetAllDetailOnlineOrderByOnlineOrderId(id uuid.UUID) ([]model.DetailOnlineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDetailOnlineOrderByOnlineOrderId", id)
	ret0, _ := ret[0].([]model.DetailOnlineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDetailOnlineOrderByOnlineOrderId indicates an expected call of GetAllDetailOnlineOrderByOnlineOrderId.
func (mr *MockOnlineOrderRepositoryMockRecorder) GetAllDetailOnlineOrderByOnlineOrderId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDetailOnlineOrderByOnlineOrderId", reflect.TypeOf((*MockOnlineOrderRepository)(nil).GetAllDetailOnlineOrderByOnlineOrderId), id)
}

// GetAllOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) GetAllOnlineOrder() ([]model.OnlineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOnlineOrder")
	ret0, _ := ret[0].([]model.OnlineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOnlineOrder indicates an expected call of GetAllOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) GetAllOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).GetAllOnlineOrder))
}

// GetDetailOnlineOrderByOnlineOrderId mocks base method.
func (m *MockOnlineOrderRepository) GetDetailOnlineOrderByOnlineOrderId(id uuid.UUID) ([]model.DetailOnlineOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailOnlineOrderByOnlineOrderId", id)
	ret0, _ := ret[0].([]model.DetailOnlineOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailOnlineOrderByOnlineOrderId indicates an expected call of GetDetailOnlineOrderByOnlineOrderId.
func (mr *MockOnlineOrderRepositoryMockRecorder) GetDetailOnlineOrderByOnlineOrderId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailOnlineOrderByOnlineOrderId", reflect.TypeOf((*MockOnlineOrderRepository)(nil).GetDetailOnlineOrderByOnlineOrderId), id)
}

// GetOnlineOrderById mocks base method.
func (m *MockOnlineOrderRepository) GetOnlineOrderById(id uuid.UUID) (model.OnlineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineOrderById", id)
	ret0, _ := ret[0].(model.OnlineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineOrderById indicates an expected call of GetOnlineOrderById.
func (mr *MockOnlineOrderRepositoryMockRecorder) GetOnlineOrderById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineOrderById", reflect.TypeOf((*MockOnlineOrderRepository)(nil).GetOnlineOrderById), id)
}

// RecapProfitAdultDiaperOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) RecapProfitAdultDiaperOnlineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitAdultDiaperOnlineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitAdultDiaperOnlineOrder indicates an expected call of RecapProfitAdultDiaperOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) RecapProfitAdultDiaperOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitAdultDiaperOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).RecapProfitAdultDiaperOnlineOrder))
}

// RecapProfitBabyDiaperOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) RecapProfitBabyDiaperOnlineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitBabyDiaperOnlineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitBabyDiaperOnlineOrder indicates an expected call of RecapProfitBabyDiaperOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) RecapProfitBabyDiaperOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitBabyDiaperOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).RecapProfitBabyDiaperOnlineOrder))
}

// RecapProfitFormulaMilkOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) RecapProfitFormulaMilkOnlineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitFormulaMilkOnlineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitFormulaMilkOnlineOrder indicates an expected call of RecapProfitFormulaMilkOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) RecapProfitFormulaMilkOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitFormulaMilkOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).RecapProfitFormulaMilkOnlineOrder))
}

// RecapSalesAdultDiaperByMonthOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) RecapSalesAdultDiaperByMonthOnlineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesAdultDiaperByMonthOnlineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesAdultDiaperByMonthOnlineOrder indicates an expected call of RecapSalesAdultDiaperByMonthOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) RecapSalesAdultDiaperByMonthOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesAdultDiaperByMonthOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).RecapSalesAdultDiaperByMonthOnlineOrder))
}

// RecapSalesBabyDiaperByMonthOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) RecapSalesBabyDiaperByMonthOnlineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesBabyDiaperByMonthOnlineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesBabyDiaperByMonthOnlineOrder indicates an expected call of RecapSalesBabyDiaperByMonthOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) RecapSalesBabyDiaperByMonthOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesBabyDiaperByMonthOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).RecapSalesBabyDiaperByMonthOnlineOrder))
}

// RecapSalesFormulaMilkByMonthOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) RecapSalesFormulaMilkByMonthOnlineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesFormulaMilkByMonthOnlineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesFormulaMilkByMonthOnlineOrder indicates an expected call of RecapSalesFormulaMilkByMonthOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) RecapSalesFormulaMilkByMonthOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesFormulaMilkByMonthOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).RecapSalesFormulaMilkByMonthOnlineOrder))
}

// SaveDetailOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) SaveDetailOnlineOrder(detailOnlineOrder model.DetailOnlineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDetailOnlineOrder", detailOnlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDetailOnlineOrder indicates an expected call of SaveDetailOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) SaveDetailOnlineOrder(detailOnlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDetailOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).SaveDetailOnlineOrder), detailOnlineOrder)
}

// SaveOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) SaveOnlineOrder(onlineOrder model.OnlineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOnlineOrder", onlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOnlineOrder indicates an expected call of SaveOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) SaveOnlineOrder(onlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).SaveOnlineOrder), onlineOrder)
}

// UpdateOnlineOrder mocks base method.
func (m *MockOnlineOrderRepository) UpdateOnlineOrder(id uuid.UUID, data map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOnlineOrder", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOnlineOrder indicates an expected call of UpdateOnlineOrder.
func (mr *MockOnlineOrderRepositoryMockRecorder) UpdateOnlineOrder(id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOnlineOrder", reflect.TypeOf((*MockOnlineOrderRepository)(nil).UpdateOnlineOrder), id, data)
}
