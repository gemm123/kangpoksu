// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/kangpoksu/internal/repository/pickup-online.go
//
// Generated by this command:
//
//	mockgen -destination=D:/golang/src/kangpoksu/mock/repository/pickup-online_mock.go -source=D:/golang/src/kangpoksu/internal/repository/pickup-online.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "kopoksu/internal/model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPickupOnlineOrderRepository is a mock of PickupOnlineOrderRepository interface.
type MockPickupOnlineOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPickupOnlineOrderRepositoryMockRecorder
}

// MockPickupOnlineOrderRepositoryMockRecorder is the mock recorder for MockPickupOnlineOrderRepository.
type MockPickupOnlineOrderRepositoryMockRecorder struct {
	mock *MockPickupOnlineOrderRepository
}

// NewMockPickupOnlineOrderRepository creates a new mock instance.
func NewMockPickupOnlineOrderRepository(ctrl *gomock.Controller) *MockPickupOnlineOrderRepository {
	mock := &MockPickupOnlineOrderRepository{ctrl: ctrl}
	mock.recorder = &MockPickupOnlineOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPickupOnlineOrderRepository) EXPECT() *MockPickupOnlineOrderRepositoryMockRecorder {
	return m.recorder
}

// CountPickupOnlineOrderByStatus mocks base method.
func (m *MockPickupOnlineOrderRepository) CountPickupOnlineOrderByStatus(status string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPickupOnlineOrderByStatus", status)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPickupOnlineOrderByStatus indicates an expected call of CountPickupOnlineOrderByStatus.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) CountPickupOnlineOrderByStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPickupOnlineOrderByStatus", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).CountPickupOnlineOrderByStatus), status)
}

// DeleteDetailPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) DeleteDetailPickupOnlineOrder(detailPickupOnlineOrder model.DetailPickupOnlineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetailPickupOnlineOrder", detailPickupOnlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDetailPickupOnlineOrder indicates an expected call of DeleteDetailPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) DeleteDetailPickupOnlineOrder(detailPickupOnlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetailPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).DeleteDetailPickupOnlineOrder), detailPickupOnlineOrder)
}

// DeletePickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) DeletePickupOnlineOrder(PickupOnlineOrder model.PickupOnlineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePickupOnlineOrder", PickupOnlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePickupOnlineOrder indicates an expected call of DeletePickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) DeletePickupOnlineOrder(PickupOnlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).DeletePickupOnlineOrder), PickupOnlineOrder)
}

// GetAllDetailPickupOnlineOrderByPickupOnlineOrderId mocks base method.
func (m *MockPickupOnlineOrderRepository) GetAllDetailPickupOnlineOrderByPickupOnlineOrderId(id uuid.UUID) ([]model.DetailPickupOnlineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDetailPickupOnlineOrderByPickupOnlineOrderId", id)
	ret0, _ := ret[0].([]model.DetailPickupOnlineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDetailPickupOnlineOrderByPickupOnlineOrderId indicates an expected call of GetAllDetailPickupOnlineOrderByPickupOnlineOrderId.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) GetAllDetailPickupOnlineOrderByPickupOnlineOrderId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDetailPickupOnlineOrderByPickupOnlineOrderId", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).GetAllDetailPickupOnlineOrderByPickupOnlineOrderId), id)
}

// GetAllPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) GetAllPickupOnlineOrder() ([]model.PickupOnlineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPickupOnlineOrder")
	ret0, _ := ret[0].([]model.PickupOnlineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPickupOnlineOrder indicates an expected call of GetAllPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) GetAllPickupOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).GetAllPickupOnlineOrder))
}

// GetDetailPickupOnlineOrderByPickupOnlineOrderId mocks base method.
func (m *MockPickupOnlineOrderRepository) GetDetailPickupOnlineOrderByPickupOnlineOrderId(id uuid.UUID) ([]model.DetailPickupOnlineOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailPickupOnlineOrderByPickupOnlineOrderId", id)
	ret0, _ := ret[0].([]model.DetailPickupOnlineOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailPickupOnlineOrderByPickupOnlineOrderId indicates an expected call of GetDetailPickupOnlineOrderByPickupOnlineOrderId.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) GetDetailPickupOnlineOrderByPickupOnlineOrderId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailPickupOnlineOrderByPickupOnlineOrderId", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).GetDetailPickupOnlineOrderByPickupOnlineOrderId), id)
}

// GetPickupOnlineOrderById mocks base method.
func (m *MockPickupOnlineOrderRepository) GetPickupOnlineOrderById(id uuid.UUID) (model.PickupOnlineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickupOnlineOrderById", id)
	ret0, _ := ret[0].(model.PickupOnlineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPickupOnlineOrderById indicates an expected call of GetPickupOnlineOrderById.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) GetPickupOnlineOrderById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickupOnlineOrderById", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).GetPickupOnlineOrderById), id)
}

// RecapProfitAdultDiaperPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) RecapProfitAdultDiaperPickupOnlineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitAdultDiaperPickupOnlineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitAdultDiaperPickupOnlineOrder indicates an expected call of RecapProfitAdultDiaperPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) RecapProfitAdultDiaperPickupOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitAdultDiaperPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).RecapProfitAdultDiaperPickupOnlineOrder))
}

// RecapProfitBabyDiaperPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) RecapProfitBabyDiaperPickupOnlineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitBabyDiaperPickupOnlineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitBabyDiaperPickupOnlineOrder indicates an expected call of RecapProfitBabyDiaperPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) RecapProfitBabyDiaperPickupOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitBabyDiaperPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).RecapProfitBabyDiaperPickupOnlineOrder))
}

// RecapProfitFormulaMilkPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) RecapProfitFormulaMilkPickupOnlineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitFormulaMilkPickupOnlineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitFormulaMilkPickupOnlineOrder indicates an expected call of RecapProfitFormulaMilkPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) RecapProfitFormulaMilkPickupOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitFormulaMilkPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).RecapProfitFormulaMilkPickupOnlineOrder))
}

// RecapSalesAdultDiaperByMonthPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) RecapSalesAdultDiaperByMonthPickupOnlineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesAdultDiaperByMonthPickupOnlineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesAdultDiaperByMonthPickupOnlineOrder indicates an expected call of RecapSalesAdultDiaperByMonthPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) RecapSalesAdultDiaperByMonthPickupOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesAdultDiaperByMonthPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).RecapSalesAdultDiaperByMonthPickupOnlineOrder))
}

// RecapSalesBabyDiaperByMonthPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) RecapSalesBabyDiaperByMonthPickupOnlineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesBabyDiaperByMonthPickupOnlineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesBabyDiaperByMonthPickupOnlineOrder indicates an expected call of RecapSalesBabyDiaperByMonthPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) RecapSalesBabyDiaperByMonthPickupOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesBabyDiaperByMonthPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).RecapSalesBabyDiaperByMonthPickupOnlineOrder))
}

// RecapSalesFormulaMilkByMonthPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) RecapSalesFormulaMilkByMonthPickupOnlineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesFormulaMilkByMonthPickupOnlineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesFormulaMilkByMonthPickupOnlineOrder indicates an expected call of RecapSalesFormulaMilkByMonthPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) RecapSalesFormulaMilkByMonthPickupOnlineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesFormulaMilkByMonthPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).RecapSalesFormulaMilkByMonthPickupOnlineOrder))
}

// SaveDetailPickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) SaveDetailPickupOnlineOrder(detailPickupOnlineOrder model.DetailPickupOnlineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDetailPickupOnlineOrder", detailPickupOnlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDetailPickupOnlineOrder indicates an expected call of SaveDetailPickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) SaveDetailPickupOnlineOrder(detailPickupOnlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDetailPickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).SaveDetailPickupOnlineOrder), detailPickupOnlineOrder)
}

// SavePickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) SavePickupOnlineOrder(PickupOnlineOrder model.PickupOnlineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePickupOnlineOrder", PickupOnlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePickupOnlineOrder indicates an expected call of SavePickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) SavePickupOnlineOrder(PickupOnlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).SavePickupOnlineOrder), PickupOnlineOrder)
}

// UpdatePickupOnlineOrder mocks base method.
func (m *MockPickupOnlineOrderRepository) UpdatePickupOnlineOrder(id uuid.UUID, data map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePickupOnlineOrder", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePickupOnlineOrder indicates an expected call of UpdatePickupOnlineOrder.
func (mr *MockPickupOnlineOrderRepositoryMockRecorder) UpdatePickupOnlineOrder(id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePickupOnlineOrder", reflect.TypeOf((*MockPickupOnlineOrderRepository)(nil).UpdatePickupOnlineOrder), id, data)
}
