// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/kopoksu/internal/repository/offline-order.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/kopoksu/internal/repository/offline-order.go -destination=D:/golang/src/kopoksu/mock/repository/offline-order_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "kopoksu/internal/model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOfflineOrderRepository is a mock of OfflineOrderRepository interface.
type MockOfflineOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOfflineOrderRepositoryMockRecorder
}

// MockOfflineOrderRepositoryMockRecorder is the mock recorder for MockOfflineOrderRepository.
type MockOfflineOrderRepositoryMockRecorder struct {
	mock *MockOfflineOrderRepository
}

// NewMockOfflineOrderRepository creates a new mock instance.
func NewMockOfflineOrderRepository(ctrl *gomock.Controller) *MockOfflineOrderRepository {
	mock := &MockOfflineOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOfflineOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfflineOrderRepository) EXPECT() *MockOfflineOrderRepositoryMockRecorder {
	return m.recorder
}

// CountOfflineOrderByStatus mocks base method.
func (m *MockOfflineOrderRepository) CountOfflineOrderByStatus(status string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOfflineOrderByStatus", status)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOfflineOrderByStatus indicates an expected call of CountOfflineOrderByStatus.
func (mr *MockOfflineOrderRepositoryMockRecorder) CountOfflineOrderByStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOfflineOrderByStatus", reflect.TypeOf((*MockOfflineOrderRepository)(nil).CountOfflineOrderByStatus), status)
}

// DeleteDetailOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) DeleteDetailOfflineOrder(detailOfflineOrder model.DetailOfflineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetailOfflineOrder", detailOfflineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDetailOfflineOrder indicates an expected call of DeleteDetailOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) DeleteDetailOfflineOrder(detailOfflineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetailOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).DeleteDetailOfflineOrder), detailOfflineOrder)
}

// DeleteOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) DeleteOfflineOrder(offlineOrder model.OfflineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfflineOrder", offlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfflineOrder indicates an expected call of DeleteOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) DeleteOfflineOrder(offlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).DeleteOfflineOrder), offlineOrder)
}

// GetAllDetailOfflineOrderByOfflineOrderId mocks base method.
func (m *MockOfflineOrderRepository) GetAllDetailOfflineOrderByOfflineOrderId(id uuid.UUID) ([]model.DetailOfflineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDetailOfflineOrderByOfflineOrderId", id)
	ret0, _ := ret[0].([]model.DetailOfflineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDetailOfflineOrderByOfflineOrderId indicates an expected call of GetAllDetailOfflineOrderByOfflineOrderId.
func (mr *MockOfflineOrderRepositoryMockRecorder) GetAllDetailOfflineOrderByOfflineOrderId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDetailOfflineOrderByOfflineOrderId", reflect.TypeOf((*MockOfflineOrderRepository)(nil).GetAllDetailOfflineOrderByOfflineOrderId), id)
}

// GetAllOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) GetAllOfflineOrder() ([]model.OfflineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOfflineOrder")
	ret0, _ := ret[0].([]model.OfflineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOfflineOrder indicates an expected call of GetAllOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) GetAllOfflineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).GetAllOfflineOrder))
}

// GetDetailOfflineOrderByOfflineOrderId mocks base method.
func (m *MockOfflineOrderRepository) GetDetailOfflineOrderByOfflineOrderId(id uuid.UUID) ([]model.DetailOfflineOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailOfflineOrderByOfflineOrderId", id)
	ret0, _ := ret[0].([]model.DetailOfflineOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailOfflineOrderByOfflineOrderId indicates an expected call of GetDetailOfflineOrderByOfflineOrderId.
func (mr *MockOfflineOrderRepositoryMockRecorder) GetDetailOfflineOrderByOfflineOrderId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailOfflineOrderByOfflineOrderId", reflect.TypeOf((*MockOfflineOrderRepository)(nil).GetDetailOfflineOrderByOfflineOrderId), id)
}

// GetOfflineOrderById mocks base method.
func (m *MockOfflineOrderRepository) GetOfflineOrderById(id uuid.UUID) (model.OfflineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfflineOrderById", id)
	ret0, _ := ret[0].(model.OfflineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfflineOrderById indicates an expected call of GetOfflineOrderById.
func (mr *MockOfflineOrderRepositoryMockRecorder) GetOfflineOrderById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfflineOrderById", reflect.TypeOf((*MockOfflineOrderRepository)(nil).GetOfflineOrderById), id)
}

// RecapProfitAdultDiaperOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) RecapProfitAdultDiaperOfflineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitAdultDiaperOfflineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitAdultDiaperOfflineOrder indicates an expected call of RecapProfitAdultDiaperOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) RecapProfitAdultDiaperOfflineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitAdultDiaperOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).RecapProfitAdultDiaperOfflineOrder))
}

// RecapProfitBabyDiaperOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) RecapProfitBabyDiaperOfflineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitBabyDiaperOfflineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitBabyDiaperOfflineOrder indicates an expected call of RecapProfitBabyDiaperOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) RecapProfitBabyDiaperOfflineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitBabyDiaperOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).RecapProfitBabyDiaperOfflineOrder))
}

// RecapProfitFormulaMilkOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) RecapProfitFormulaMilkOfflineOrder() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapProfitFormulaMilkOfflineOrder")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapProfitFormulaMilkOfflineOrder indicates an expected call of RecapProfitFormulaMilkOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) RecapProfitFormulaMilkOfflineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapProfitFormulaMilkOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).RecapProfitFormulaMilkOfflineOrder))
}

// RecapSalesAdultDiaperByMonthOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) RecapSalesAdultDiaperByMonthOfflineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesAdultDiaperByMonthOfflineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesAdultDiaperByMonthOfflineOrder indicates an expected call of RecapSalesAdultDiaperByMonthOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) RecapSalesAdultDiaperByMonthOfflineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesAdultDiaperByMonthOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).RecapSalesAdultDiaperByMonthOfflineOrder))
}

// RecapSalesBabyDiaperByMonthOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) RecapSalesBabyDiaperByMonthOfflineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesBabyDiaperByMonthOfflineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesBabyDiaperByMonthOfflineOrder indicates an expected call of RecapSalesBabyDiaperByMonthOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) RecapSalesBabyDiaperByMonthOfflineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesBabyDiaperByMonthOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).RecapSalesBabyDiaperByMonthOfflineOrder))
}

// RecapSalesFormulaMilkByMonthOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) RecapSalesFormulaMilkByMonthOfflineOrder() ([]model.RecapSalesByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecapSalesFormulaMilkByMonthOfflineOrder")
	ret0, _ := ret[0].([]model.RecapSalesByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecapSalesFormulaMilkByMonthOfflineOrder indicates an expected call of RecapSalesFormulaMilkByMonthOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) RecapSalesFormulaMilkByMonthOfflineOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecapSalesFormulaMilkByMonthOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).RecapSalesFormulaMilkByMonthOfflineOrder))
}

// SaveDetailOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) SaveDetailOfflineOrder(detailOfflineOrder model.DetailOfflineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDetailOfflineOrder", detailOfflineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDetailOfflineOrder indicates an expected call of SaveDetailOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) SaveDetailOfflineOrder(detailOfflineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDetailOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).SaveDetailOfflineOrder), detailOfflineOrder)
}

// SaveOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) SaveOfflineOrder(offlineOrder model.OfflineOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOfflineOrder", offlineOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOfflineOrder indicates an expected call of SaveOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) SaveOfflineOrder(offlineOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).SaveOfflineOrder), offlineOrder)
}

// UpdateOfflineOrder mocks base method.
func (m *MockOfflineOrderRepository) UpdateOfflineOrder(id uuid.UUID, data map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfflineOrder", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOfflineOrder indicates an expected call of UpdateOfflineOrder.
func (mr *MockOfflineOrderRepositoryMockRecorder) UpdateOfflineOrder(id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfflineOrder", reflect.TypeOf((*MockOfflineOrderRepository)(nil).UpdateOfflineOrder), id, data)
}
